task wrapper(type: Wrapper) {
    gradleVersion = '1.9'
}

buildscript {
    def rosMavenPath = "$System.env.ROS_MAVEN_PATH".split(':').collect { 'file://' + it }
    def rosMavenRepository = "$System.env.ROS_MAVEN_REPOSITORY"
    repositories {
        rosMavenPath.each { p ->
            maven {
                url p
            }
        }
        mavenLocal()
        maven {
            url rosMavenRepository
        }
    }
    dependencies {
        classpath group: 'org.ros.rosjava_bootstrap', name: 'gradle_plugins', version: '[0.1,0.2)'
    }
}

apply plugin: 'catkin'
project.catkin.tree.generate()



allprojects {
    /*
      A github url provides a good standard unique name for your project
      Example below, but you may wish to switch to your own unique url.
    */
    group 'com.github.rosjava.rosjava_pkg'
    version = project.catkin.pkg.version
}

subprojects {
    /*
      See https://github.com/rosjava/rosjava_bootstrap (look for gradle_plugins)
      to see what is going on under the hood.
    */
    apply plugin: 'ros-java'
    task deployApp(dependsOn: 'installApp') << {
        File binDir = new File(project.projectDir, '/bin')
        if (! binDir.isDirectory()) {
            println "Creating $binDir directory"
            binDir.mkdirs()
        }
        File link = new File(binDir,"${project.name}-execute")
        if (link.exists()) {
            link.delete();
        }
        File target = new File(project.projectDir, "build/install/$project.name/bin/$project.name")
        println "Creating symlink from $link.absolutePath to $target.absolutePath"
        ant.symlink(link: link.absolutePath, resource: target.absolutePath)
    }
}

/*
  Some useful tasks:

    install: deploys jar's to MavenLocal() (i.e. ~/.m2/repository)
    publishMavenJavaPublicationToMavenRepository : deploys jar's to devel/share/maven
    installApp : assembles java apps in the _subproject_/build directories.

  Note that these are dependent on the type of project (e.g. installApp is only valid for
  java binary subprojects, while publishMavenJav... is only added once a subproject is included.
  If you're using catkin_make, this is not important, since it will use the task list specified
  in CMakeLists.txt
*/
defaultTasks 'tasks'
